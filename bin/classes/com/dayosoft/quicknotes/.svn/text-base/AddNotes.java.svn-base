/**
 * 
 */
package com.dayosoft.quicknotes;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;

import com.dayosoft.utils.DialogUtils;
import com.dayosoft.utils.DictionaryOpenHelper;
import com.dayosoft.utils.GoogleMapsLocation;
import com.dayosoft.utils.LocationFixedListener;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.PorterDuff.Mode;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

/**
 * @author Joseph Emmanuel Dayo
 * 
 */
public class AddNotes extends Activity implements LocationFixedListener {
	DictionaryOpenHelper helper;
	EditText titleField, contentField;
	SharedPreferences prefs;
	Location latestloc;
	String googleurl;
	Uri imageUri;
	Vector<NoteMeta> metalist = new Vector<NoteMeta>();

	static final int ACTION_PICK_IMAGE = 0;
	static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 1;

	OnClickListener saveNoteListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			Note note = new Note();
			String title = AddNotes.this.titleField.getText().toString();
			String content = AddNotes.this.contentField.getText().toString();
			note.setTitle(title);
			note.setContent(content);
			if (latestloc != null) {
				note.setLongitude(latestloc.getLongitude());
				note.setLatitude(latestloc.getLatitude());
				NoteMeta meta = new NoteMeta();
				meta.setType(NoteMeta.GOOGLEMAPSURL);
				meta.setResource_url(googleurl);
				note.addMeta(meta);
			}
			for (NoteMeta meta : metalist) {
				note.addMeta(meta);
			}
			helper.persist(note);
			AddNotes.this.finish();
		}

	};

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.addnote);
		prefs = getSharedPreferences("ginote_settings", MODE_PRIVATE);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

		helper = new DictionaryOpenHelper(this);
		Button saveButton = (Button) findViewById(R.id.CreateNewNote);
		Button cancelButton = (Button) findViewById(R.id.cancel);
		Button contextButton = (Button) findViewById(R.id.moreButton);
		cancelButton.setOnClickListener(DialogUtils.closeNavigator(this));
		saveButton.setOnClickListener(saveNoteListener);
		// saveButton.getBackground().setColorFilter(0xFF00FF00, Mode.MULTIPLY);

		titleField = (EditText) findViewById(R.id.NoteTitle);
		contentField = (EditText) findViewById(R.id.ContentField);
		contentField.requestFocus();
		InputMethodManager mgr = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
		// only will trigger it if no physical keyboard is open

		mgr.showSoftInput(contentField, InputMethodManager.SHOW_FORCED);

		DialogUtils.linkToContextMenu(this, contextButton);
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.notecontext, menu);
	}

	@Override
	public void onResume() {
		super.onResume();
		boolean use_gps = prefs.getBoolean("use_gps", false);
		if (use_gps) {
			GoogleMapsLocation locator = new GoogleMapsLocation(this, this);
			locator.startGetFix();
		}
	}

	@Override
	public void onLocationFixed(Location location, String url) {
		this.latestloc = location;
		this.googleurl = url;
		TextView urlField = (TextView) findViewById(R.id.url);
		urlField.setText(url);
	}

	@Override
	public void onLocationError(int status) {
		// TODO Auto-generated method stub

	}

	public boolean hasImageCaptureBug() {

		// list of known devices that have the bug
		ArrayList<String> devices = new ArrayList<String>();
		devices.add("android-devphone1/dream_devphone/dream");
		devices.add("generic/sdk/generic");
		devices.add("vodafone/vfpioneer/sapphire");
		devices.add("tmobile/kila/dream");
		devices.add("verizon/voles/sholes");
		devices.add("google_ion/google_ion/sapphire");

		return devices.contains(android.os.Build.BRAND + "/"
				+ android.os.Build.PRODUCT + "/" + android.os.Build.DEVICE);

	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
				.getMenuInfo();
		switch (item.getItemId()) {
		case R.id.itemPhotos:
			Intent i = new Intent(
					Intent.ACTION_PICK,
					android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI);
			startActivityForResult(i, ACTION_PICK_IMAGE);
			break;
		case R.id.itemCamera:
			if (DialogUtils.isStorageWritable()) {
				SimpleDateFormat format = new SimpleDateFormat("hhmmssMMDDyyyy");
				String fileName = "ginote_" + format.format(new Date())
						+ ".jpg.tmp";
				ContentValues values = new ContentValues();
				values.put(MediaStore.Images.Media.TITLE, fileName);
				values.put(MediaStore.Images.Media.DESCRIPTION,
						"Image capture by camera");
				// imageUri is the current activity attribute, define and save
				// it
				// for later usage (also in onSaveInstanceState)
				imageUri = getContentResolver().insert(
						MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
				// create new Intent
				Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

				intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,
						imageUri);
				intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1);
				startActivityForResult(intent,
						CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
			} else {
				DialogUtils.showMessageAlert("SD Card is not mounted!", this);
			}
		default:
			return super.onContextItemSelected(item);
		}
		return true;
	}

	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == ACTION_PICK_IMAGE) {
			if (resultCode == RESULT_OK) {
				Uri selectedImage = data.getData();
				String[] filePathColumn = { MediaStore.Images.Media.DATA };

				Cursor cursor = getContentResolver().query(selectedImage,
						filePathColumn, null, null, null);
				cursor.moveToFirst();

				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				String filePath = cursor.getString(columnIndex);
				cursor.close();

				NoteMeta meta = new NoteMeta();
				meta.setResource_url(filePath);
				meta.setType(NoteMeta.IMAGE);
				metalist.add(meta);
				Toast.makeText(this, "Picture added to note",
						Toast.LENGTH_SHORT);				
			}
		} else if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {
			if (resultCode == RESULT_OK) {
				// use imageUri here to access the image
				if (imageUri != null) {
					File f = DialogUtils.convertImageUriToFile(imageUri, this);
					String origfile = "";
					String newfilename = "";
					try {
						origfile = f.getCanonicalPath();

						// resize since image may be too big for this app to
						// handle
						BitmapFactory.Options opts = new BitmapFactory.Options();
						opts.inSampleSize = 4;

						Bitmap bitmap = BitmapFactory.decodeFile(
								f.getCanonicalPath(), opts);
						SimpleDateFormat format = new SimpleDateFormat(
								"hhmmssMMDDyyyy");
						newfilename = f.getParentFile().getCanonicalPath()
								+ "/ginote_" + format.format(new Date())
								+ ".jpg";
						Log.d(this.getClass().toString(), "saving to "
								+ newfilename + "...");
						File nf = new File(newfilename);
						nf.createNewFile();
						FileOutputStream os = new FileOutputStream(nf);
						bitmap.compress(CompressFormat.JPEG, 80, os);
						os.flush();
						os.close();
						f.delete();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					NoteMeta meta = new NoteMeta();
					meta.setResource_url(newfilename);

					meta.setType(NoteMeta.IMAGE);
					metalist.add(meta);
					Toast.makeText(this, "Picture added to note",
							Toast.LENGTH_SHORT);
				}
			} else if (resultCode == RESULT_CANCELED) {
				Toast.makeText(this, "Picture was not taken",
						Toast.LENGTH_SHORT);
			} else {
				Toast.makeText(this, "Picture was not taken",
						Toast.LENGTH_SHORT);
			}
		}

	}
}
